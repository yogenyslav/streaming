version: "3.8"

volumes:
  pg_data:
  mongo_data:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  zoo_data:
  minio_data:

services:
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server --console-address ":9001" /data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    volumes:
      - zoo_data:/var/lib/zookeeper/log
      - zoo_data:/etc/zookeeper/secrets
      - zoo_data:/var/lib/zookeeper/data
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"

  kafka1:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: LISTENER_INT://kafka1:29091,LISTENER_EXT://0.0.0.0:9091
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka1:29091,LISTENER_EXT://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
      ZOOKEEPER: zookeeper:2181
    volumes:
      - kafka1_data:/mnt/shared/config
      - kafka1_data:/var/lib/kafka/data
      - kafka1_data:/etc/kafka/secrets

  kafka2:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: LISTENER_INT://kafka2:29092,LISTENER_EXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka2:29092,LISTENER_EXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
      ZOOKEEPER: zookeeper:2181
    volumes:
      - kafka2_data:/mnt/shared/config
      - kafka2_data:/var/lib/kafka/data
      - kafka2_data:/etc/kafka/secrets

  kafka3:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENERS: LISTENER_INT://kafka3:29093,LISTENER_EXT://0.0.0.0:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka3:29093,LISTENER_EXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
      ZOOKEEPER: zookeeper:2181
    volumes:
      - kafka3_data:/mnt/shared/config
      - kafka3_data:/var/lib/kafka/data
      - kafka3_data:/etc/kafka/secrets


  mongo:
    image: mongo:5.0
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_data:/data/configdb

  pg:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  framer:
    build:
      context: ./framer
      dockerfile: Dockerfile
    restart: always
    image: ${PROJECT_DIR}_framer
    depends_on:
      - minio
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "10000:10000"

  detection:
    build:
      context: ./detection
      dockerfile: Dockerfile
    restart: always
    image: ${PROJECT_DIR}_detection
    depends_on:
      - mongo
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "10001:10001"

#  responser:
#    build:
#      context: ./responser
#      dockerfile: Dockerfile
#    restart: always
#    image: ${PROJECT_DIR}_responser
#    deploy:
#      replicas: 3
#    depends_on:
#      - mongo
#      - minio
#      - kafka
#    ports:
#      - "10002:10002"

  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    restart: always
    image: ${PROJECT_DIR}_orchestrator
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - zookeeper
      - detection
      - framer
#      - responser
    ports:
      - "9988:9988"
    command: ./main

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: final
    restart: always
    image: ${PROJECT_DIR}_api
    depends_on:
      - pg
      - orchestrator
    ports:
      - "9999:9999"
    command: ./main
