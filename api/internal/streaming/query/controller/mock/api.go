// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pb/api_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=../../pb/api_grpc.pb.go -destination=./mock/api.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	pb "streaming/api/internal/streaming/pb"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOrchestratorClient is a mock of OrchestratorClient interface.
type MockOrchestratorClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorClientMockRecorder
}

// MockOrchestratorClientMockRecorder is the mock recorder for MockOrchestratorClient.
type MockOrchestratorClientMockRecorder struct {
	mock *MockOrchestratorClient
}

// NewMockOrchestratorClient creates a new mock instance.
func NewMockOrchestratorClient(ctrl *gomock.Controller) *MockOrchestratorClient {
	mock := &MockOrchestratorClient{ctrl: ctrl}
	mock.recorder = &MockOrchestratorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorClient) EXPECT() *MockOrchestratorClientMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockOrchestratorClient) Cancel(ctx context.Context, in *pb.CancelReq, opts ...grpc.CallOption) (*pb.CancelResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cancel", varargs...)
	ret0, _ := ret[0].(*pb.CancelResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockOrchestratorClientMockRecorder) Cancel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOrchestratorClient)(nil).Cancel), varargs...)
}

// GetResult mocks base method.
func (m *MockOrchestratorClient) GetResult(ctx context.Context, in *pb.GetResultReq, opts ...grpc.CallOption) (*pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResult", varargs...)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResult indicates an expected call of GetResult.
func (mr *MockOrchestratorClientMockRecorder) GetResult(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockOrchestratorClient)(nil).GetResult), varargs...)
}

// Process mocks base method.
func (m *MockOrchestratorClient) Process(ctx context.Context, in *pb.Query, opts ...grpc.CallOption) (*pb.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Process", varargs...)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockOrchestratorClientMockRecorder) Process(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockOrchestratorClient)(nil).Process), varargs...)
}

// MockOrchestratorServer is a mock of OrchestratorServer interface.
type MockOrchestratorServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorServerMockRecorder
}

// MockOrchestratorServerMockRecorder is the mock recorder for MockOrchestratorServer.
type MockOrchestratorServerMockRecorder struct {
	mock *MockOrchestratorServer
}

// NewMockOrchestratorServer creates a new mock instance.
func NewMockOrchestratorServer(ctrl *gomock.Controller) *MockOrchestratorServer {
	mock := &MockOrchestratorServer{ctrl: ctrl}
	mock.recorder = &MockOrchestratorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestratorServer) EXPECT() *MockOrchestratorServerMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockOrchestratorServer) Cancel(arg0 context.Context, arg1 *pb.CancelReq) (*pb.CancelResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(*pb.CancelResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockOrchestratorServerMockRecorder) Cancel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOrchestratorServer)(nil).Cancel), arg0, arg1)
}

// GetResult mocks base method.
func (m *MockOrchestratorServer) GetResult(arg0 context.Context, arg1 *pb.GetResultReq) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResult indicates an expected call of GetResult.
func (mr *MockOrchestratorServerMockRecorder) GetResult(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockOrchestratorServer)(nil).GetResult), arg0, arg1)
}

// Process mocks base method.
func (m *MockOrchestratorServer) Process(arg0 context.Context, arg1 *pb.Query) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockOrchestratorServerMockRecorder) Process(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockOrchestratorServer)(nil).Process), arg0, arg1)
}

// mustEmbedUnimplementedOrchestratorServer mocks base method.
func (m *MockOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrchestratorServer")
}

// mustEmbedUnimplementedOrchestratorServer indicates an expected call of mustEmbedUnimplementedOrchestratorServer.
func (mr *MockOrchestratorServerMockRecorder) mustEmbedUnimplementedOrchestratorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrchestratorServer", reflect.TypeOf((*MockOrchestratorServer)(nil).mustEmbedUnimplementedOrchestratorServer))
}

// MockUnsafeOrchestratorServer is a mock of UnsafeOrchestratorServer interface.
type MockUnsafeOrchestratorServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrchestratorServerMockRecorder
}

// MockUnsafeOrchestratorServerMockRecorder is the mock recorder for MockUnsafeOrchestratorServer.
type MockUnsafeOrchestratorServerMockRecorder struct {
	mock *MockUnsafeOrchestratorServer
}

// NewMockUnsafeOrchestratorServer creates a new mock instance.
func NewMockUnsafeOrchestratorServer(ctrl *gomock.Controller) *MockUnsafeOrchestratorServer {
	mock := &MockUnsafeOrchestratorServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrchestratorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrchestratorServer) EXPECT() *MockUnsafeOrchestratorServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrchestratorServer mocks base method.
func (m *MockUnsafeOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrchestratorServer")
}

// mustEmbedUnimplementedOrchestratorServer indicates an expected call of mustEmbedUnimplementedOrchestratorServer.
func (mr *MockUnsafeOrchestratorServerMockRecorder) mustEmbedUnimplementedOrchestratorServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrchestratorServer", reflect.TypeOf((*MockUnsafeOrchestratorServer)(nil).mustEmbedUnimplementedOrchestratorServer))
}
